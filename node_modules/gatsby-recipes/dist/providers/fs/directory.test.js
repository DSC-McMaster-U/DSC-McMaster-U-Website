"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _directory = _interopRequireDefault(require("./directory"));

var _resourceSchema = _interopRequireDefault(require("../resource-schema"));

var _joi = _interopRequireDefault(require("@hapi/joi"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

jest.mock(`fs-extra`);
const root = `fakeDir`;
describe(`directory resource`, () => {
  test(`e2e directory resource test`, async () => {
    const context = {
      root
    };
    const initialObject = {
      path: `directory`
    };
    const partialUpdate = {
      path: `directory1`
    };

    const fullPath = _path.default.join(root, initialObject.path);

    const createPlan = await _directory.default.plan(context, initialObject);
    expect(createPlan).toBeTruthy();
    expect(createPlan).toMatchInlineSnapshot(`
      Object {
        "describe": "Create directory \\"directory\\"",
      }
    `); // Test creating the resource

    const createResponse = await _directory.default.create(context, initialObject);

    const validateResult = _joi.default.validate(createResponse, { ..._directory.default.schema,
      ..._resourceSchema.default
    });

    expect(validateResult.error).toBeNull();
    expect(_fsExtra.default.ensureDir).toHaveBeenCalledWith(fullPath);
    expect(createResponse).toMatchInlineSnapshot(`
      Object {
        "_message": "Created directory \\"directory\\"",
        "id": "directory",
        "path": "directory",
      }
    `); // Test reading the resource

    const readResponse = await _directory.default.read(context, createResponse.id);
    expect(readResponse).toEqual(createResponse); // Test updating the resource

    const updatedResource = { ...readResponse,
      ...partialUpdate
    };
    const updatePlan = await _directory.default.plan(context, updatedResource);
    expect(updatePlan).toMatchInlineSnapshot(`
      Object {
        "describe": "Create directory \\"directory1\\"",
      }
    `);

    _fsExtra.default.ensureDir.mockReset();

    const updateResponse = await _directory.default.update(context, updatedResource);
    expect(_fsExtra.default.ensureDir).toHaveBeenCalledWith(fullPath);
    await _directory.default.destroy(context, updateResponse);
    expect(_fsExtra.default.rmdir).toHaveBeenCalledWith(fullPath);
  });
});