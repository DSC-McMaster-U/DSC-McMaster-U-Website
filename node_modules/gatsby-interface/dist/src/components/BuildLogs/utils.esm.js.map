{"version":3,"file":"utils.esm.js","sources":["../../../../src/components/BuildLogs/utils.tsx"],"sourcesContent":["import React from \"react\"\n\nexport const formatLogMessage = (message: string): JSX.Element[] => {\n  return cutMessageToLines(message)\n    .reduce(groupLinesToPart, [])\n    .reduce(composeHeading, [])\n    .map(partToHtml)\n}\n\nconst cutMessageToLines = (message: string) => message.split(/\\r?\\n/)\n\nconst groupLinesToPart = (acc: string[][], item: string, idx: number) => {\n  if (!acc.length) {\n    acc.push([])\n  }\n\n  // we create a new part when there is an empty line or it's a second line\n  // for cases when the is no visible parts in the cli message\n  if (!item || idx === 1) {\n    acc.push([])\n  }\n\n  if (item) {\n    acc[acc.length - 1].push(item)\n  }\n\n  return acc\n}\n\nconst composeHeading = (acc: string[][], item: string[], idx: number) => {\n  // If the first line ends with ':' we assume the second line is a continuation of it\n  const extendHeading =\n    idx === 1 ? acc[0] && acc[0][0] && acc[0][0].endsWith(\":\") : false\n\n  if (extendHeading) {\n    acc[0] = [...acc[0], ...item]\n  } else {\n    acc.push(item)\n  }\n\n  return acc\n}\n\nconst URL_REGEX = /(https?:\\/\\/([-a-zA-Z0-9@:%_+.~#?&//=]*))/\n\nconst toInlineText = (item: string) => {\n  // make link active\n  const rewritenItem = item.replace(\n    URL_REGEX,\n    url =>\n      `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`\n  )\n\n  // add space at the end of string to separate pharse from the following one\n  return `${rewritenItem} `\n}\n\nconst ERROR_POINTERS_REGEX = /\\^+/\nconst LINE_PREFIX_REGEX = /^([\\s|>]+\\d*\\s\\|\\s)|([\\d|\\s]+\\|)/\n\nconst toCodeLine = (item: string) => {\n  const styledItem = item\n    // wrap \"^^^^^^^^^^\" in <em> for special styling\n    .replace(ERROR_POINTERS_REGEX, pointers => `<em>${pointers}</em>`)\n    // wrap line number prefix in <span> for special styling\n    .replace(LINE_PREFIX_REGEX, linePrefix => `<span>${linePrefix}</span>`)\n\n  return `${styledItem}\\r\\n`\n}\n\n// We assume that lines starting with '-' are list items\nconst LIST_MARKER_REGEX = /^-\\s/\n\nconst toListItem = (item: string) => {\n  const cleandItem = item.replace(LIST_MARKER_REGEX, \"\")\n\n  return `<li>${cleandItem}</li>`\n}\n\nconst CODE_REGEX = /^([\\s|>]+\\d*\\s\\|\\s)|([\\d|\\s]+\\|)|GraphQL/\n\nconst partToHtml = (part: string[]) => {\n  const isList = part.every(item => LIST_MARKER_REGEX.test(item))\n\n  if (isList) {\n    return (\n      <ul dangerouslySetInnerHTML={{ __html: part.map(toListItem).join(``) }} />\n    )\n  }\n\n  const isCode = part.every(item => CODE_REGEX.test(item))\n\n  if (isCode) {\n    return (\n      <pre tabIndex={0}>\n        <code\n          dangerouslySetInnerHTML={{ __html: part.map(toCodeLine).join(``) }}\n        />\n      </pre>\n    )\n  }\n\n  return (\n    <p dangerouslySetInnerHTML={{ __html: part.map(toInlineText).join(``) }} />\n  )\n}\n"],"names":["formatLogMessage","message","cutMessageToLines","reduce","groupLinesToPart","composeHeading","map","partToHtml","split","acc","item","idx","length","push","extendHeading","endsWith","URL_REGEX","toInlineText","rewritenItem","replace","url","ERROR_POINTERS_REGEX","LINE_PREFIX_REGEX","toCodeLine","styledItem","pointers","linePrefix","LIST_MARKER_REGEX","toListItem","cleandItem","CODE_REGEX","part","isList","every","test","React","__html","join","isCode"],"mappings":"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"}