{"version":3,"file":"useAriaFormGroupField.esm.js","sources":["../../../../../src/components/form-skeletons/hooks/useAriaFormGroupField.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"@emotion/core\"\nimport React from \"react\"\nimport { getHintId, getErrorId, getErrorAriaLiveAttribute } from \"../utils\"\nimport { visuallyHiddenCss } from \"../../../stylesheets/a11y\"\nimport { ErrorValidationMode } from \"../types\"\n\nexport type AriaFormGroupFieldData = {\n  getLegendProps: (\n    label: React.ReactNode\n  ) => {\n    children: React.ReactNode\n  }\n  getOptionControlProps: (\n    optionValue: string\n  ) => {\n    id: string\n    required: boolean\n  }\n  getOptionLabelProps: (\n    optionValue: string\n  ) => {\n    htmlFor: string\n  }\n  hintProps: {\n    id: string\n    hidden: boolean\n    \"aria-hidden\": boolean\n  }\n  errorProps: {\n    id: string\n    hidden: boolean\n    \"aria-hidden\": boolean\n    \"aria-live\": `polite` | `assertive` | `off` | undefined\n  }\n  meta: {\n    required: boolean\n  }\n}\n\n/**\n * \"group\" fields (radio buttons and checkbox groups) are more complicated\n * than \"single\" ones when it comes to aria-attributes\n *\n * Apparently, we cannot just put aria-invalid and aria-describedby to each option's input,\n * as this would result in too many screen reader announcements\n *\n * Atatching those aria- attributes to only the first option kinda works but not entirely without issues\n *\n * So instead we are going to require the actual hint and error messages and put them (visually hidden) in the group label,\n * while marking the actual visible messages as hidden from screen readers\n * For more details see this article: https://blog.tenon.io/accessible-validation-of-checkbox-and-radiobutton-groups\n */\nexport function useAriaFormGroupField(\n  fieldId: string,\n  {\n    required = false,\n    error,\n    hint,\n    hasError = Boolean(error),\n    hasHint = Boolean(hint),\n    validationMode,\n  }: {\n    required?: boolean\n    error?: React.ReactNode\n    hint?: React.ReactNode\n    hasError?: boolean\n    hasHint?: boolean\n    validationMode?: ErrorValidationMode\n  }\n): AriaFormGroupFieldData {\n  const hintId = getHintId(fieldId)\n  const errorId = getErrorId(fieldId)\n\n  return {\n    getLegendProps: (label: React.ReactNode) => ({\n      children: (\n        <React.Fragment>\n          {label}\n          <div css={visuallyHiddenCss}>\n            <div>{hint}</div>\n            <div>{error}</div>\n          </div>\n        </React.Fragment>\n      ),\n    }),\n    getOptionControlProps: (optionValue: string) => ({\n      id: getGroupOptionId(fieldId, optionValue),\n      required,\n    }),\n    getOptionLabelProps: (optionValue: string) => ({\n      htmlFor: getGroupOptionId(fieldId, optionValue),\n    }),\n    hintProps: {\n      id: hintId,\n      hidden: !hasHint,\n      \"aria-hidden\": true,\n    },\n    errorProps: {\n      id: errorId,\n      hidden: !hasError,\n      \"aria-hidden\": true,\n      \"aria-live\": getErrorAriaLiveAttribute(validationMode),\n    },\n    meta: {\n      required,\n    },\n  }\n}\n\nfunction getGroupOptionId(fieldId: string, optionValue: string) {\n  return `${fieldId}__option--${optionValue}`\n}\n"],"names":["useAriaFormGroupField","fieldId","required","error","hint","hasError","Boolean","hasHint","validationMode","hintId","getHintId","errorId","getErrorId","getLegendProps","label","children","React","visuallyHiddenCss","getOptionControlProps","optionValue","id","getGroupOptionId","getOptionLabelProps","htmlFor","hintProps","hidden","errorProps","getErrorAriaLiveAttribute","meta"],"mappings":";;;;;AAAA;;AAwCA;;;;;;;;;;;;;AAaO,SAASA,qBAAT,CACLC,OADK,QAiBmB;AAAA,2BAdtBC,QAcsB;AAAA,MAdtBA,QAcsB,8BAdX,KAcW;AAAA,MAbtBC,KAasB,QAbtBA,KAasB;AAAA,MAZtBC,IAYsB,QAZtBA,IAYsB;AAAA,2BAXtBC,QAWsB;AAAA,MAXtBA,QAWsB,8BAXXC,OAAO,CAACH,KAAD,CAWI;AAAA,0BAVtBI,OAUsB;AAAA,MAVtBA,OAUsB,6BAVZD,OAAO,CAACF,IAAD,CAUK;AAAA,MATtBI,cASsB,QATtBA,cASsB;AACxB,MAAMC,MAAM,GAAGC,SAAS,CAACT,OAAD,CAAxB;AACA,MAAMU,OAAO,GAAGC,UAAU,CAACX,OAAD,CAA1B;AAEA,SAAO;AACLY,IAAAA,cAAc,EAAE,wBAACC,KAAD;AAAA,aAA6B;AAC3CC,QAAAA,QAAQ,EACN,IAACC,cAAD,CAAO,QAAP,QACGF,KADH,EAEE;AAAK,UAAA,GAAG,EAAEG;AAAV,WACE,iBAAMb,IAAN,CADF,EAEE,iBAAMD,KAAN,CAFF,CAFF;AAFyC,OAA7B;AAAA,KADX;AAYLe,IAAAA,qBAAqB,EAAE,+BAACC,WAAD;AAAA,aAA0B;AAC/CC,QAAAA,EAAE,EAAEC,gBAAgB,CAACpB,OAAD,EAAUkB,WAAV,CAD2B;AAE/CjB,QAAAA,QAAQ,EAARA;AAF+C,OAA1B;AAAA,KAZlB;AAgBLoB,IAAAA,mBAAmB,EAAE,6BAACH,WAAD;AAAA,aAA0B;AAC7CI,QAAAA,OAAO,EAAEF,gBAAgB,CAACpB,OAAD,EAAUkB,WAAV;AADoB,OAA1B;AAAA,KAhBhB;AAmBLK,IAAAA,SAAS,EAAE;AACTJ,MAAAA,EAAE,EAAEX,MADK;AAETgB,MAAAA,MAAM,EAAE,CAAClB,OAFA;AAGT,qBAAe;AAHN,KAnBN;AAwBLmB,IAAAA,UAAU,EAAE;AACVN,MAAAA,EAAE,EAAET,OADM;AAEVc,MAAAA,MAAM,EAAE,CAACpB,QAFC;AAGV,qBAAe,IAHL;AAIV,mBAAasB,yBAAyB,CAACnB,cAAD;AAJ5B,KAxBP;AA8BLoB,IAAAA,IAAI,EAAE;AACJ1B,MAAAA,QAAQ,EAARA;AADI;AA9BD,GAAP;AAkCD;;AAED,SAASmB,gBAAT,CAA0BpB,OAA1B,EAA2CkB,WAA3C,EAAgE;AAC9D,mBAAUlB,OAAV,uBAA8BkB,WAA9B;AACD;;;;"}