import { objectWithoutProperties as _objectWithoutProperties, extends as _extends, taggedTemplateLiteral as _taggedTemplateLiteral, defineProperty as _defineProperty } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { keyframes, jsx } from '@emotion/core';
import _pt from 'prop-types';
import { warn } from '../../utils/maintenance/warn.esm.js';
import { ModalContent } from './ModalContent.esm.js';

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  0% {\n    transform: translate3d", "\n   }\n \n   100% {\n    transform: translate3d(0,0,0);\n   }\n "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var buildTranslation = function buildTranslation(position) {
  return keyframes(_templateObject(), position === "left" ? "(-100%, 0,0)" : "(100%,0,0)");
};

var translateLeft = buildTranslation("left");
var translateRight = buildTranslation("right");

var baseCss = function baseCss(theme) {
  return {
    background: theme.colors.white,
    height: "100vh",
    position: "absolute",
    animationDuration: "0.5s",
    animationFillMode: "forwards",
    animationTimingFunction: "ease"
  };
};

var DEFAULT_MAX_WIDTH = "432px";
var sizesStyles = {
  DEFAULT: function DEFAULT(_theme) {
    return _defineProperty({
      maxWidth: "100%"
    }, "@media (min-width: ".concat(DEFAULT_MAX_WIDTH, ")"), {
      maxWidth: DEFAULT_MAX_WIDTH
    });
  }
};
var ModalPanel = function ModalPanel(_ref2) {
  var maxWidth = _ref2.maxWidth,
      _ref2$position = _ref2.position,
      position = _ref2$position === void 0 ? "right" : _ref2$position,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? "DEFAULT" : _ref2$size,
      props = _objectWithoutProperties(_ref2, ["maxWidth", "position", "size"]);

  if (maxWidth) {
    warn("\"maxWidth\" prop has been deprecated in favour of \"size\" (set to \"DEFAULT\" if not passed)");
  }

  return jsx(ModalContent, _extends({
    css: function css(theme) {
      return [baseCss(theme), maxWidth ? {
        maxWidth: maxWidth
      } : sizesStyles[size](theme), position === "right" ? {
        right: 0,
        animationName: translateRight
      } : {
        left: 0,
        animationName: translateLeft
      }];
    }
  }, props));
};
ModalPanel.propTypes = {
  position: _pt.oneOf(["left", "right"]),
  size: _pt.oneOf(["DEFAULT"]),
  maxWidth: _pt.string
};
ModalPanel.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "ModalPanel",
  "props": {
    "position": {
      "defaultValue": {
        "value": "`right`",
        "computed": false
      },
      "required": false
    },
    "size": {
      "defaultValue": {
        "value": "`DEFAULT`",
        "computed": false
      },
      "required": false
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/Modal/ModalPanel.tsx"] = {
    name: "ModalPanel",
    docgenInfo: ModalPanel.__docgenInfo,
    path: "src/components/Modal/ModalPanel.tsx"
  };
}

export { ModalPanel };
//# sourceMappingURL=ModalPanel.esm.js.map
