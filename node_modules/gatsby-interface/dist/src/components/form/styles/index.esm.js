import { defineProperty as _defineProperty } from '../../../../_virtual/_rollupPluginBabelHelpers.js';

/**
 * Base styles
 */
var disabledStyles = function disabledStyles(theme) {
  return {
    background: theme.colors.grey[10],
    cursor: "not-allowed"
  };
};

var placeholderStyles = function placeholderStyles(theme) {
  return {
    color: theme.colors.grey[50]
  };
};

var disabledPlaceholderStyles = function disabledPlaceholderStyles(theme) {
  return {
    color: theme.colors.grey[40]
  };
};

var focusedStyles = function focusedStyles(theme) {
  return {
    outline: "0",
    transition: "box-shadow 0.15s ease-in-out",
    boxShadow: "0 0 0 3px ".concat(theme.colors.purple[20]),
    borderColor: theme.colors.purple[60]
  };
};

var focusedErrorStyles = function focusedErrorStyles(theme) {
  return {
    outline: "0",
    transition: "box-shadow 0.15s ease-in-out",
    boxShadow: "0 0 0 3px ".concat(theme.colors.red[10]),
    borderColor: theme.colors.red[30]
  };
};

var errorStyles = function errorStyles(theme) {
  return {
    borderColor: theme.colors.red[60]
  };
};

var baseFormControlStyles = {
  disabledStyles: disabledStyles,
  disabledPlaceholderStyles: disabledPlaceholderStyles,
  focusedStyles: focusedStyles,
  focusedErrorStyles: focusedErrorStyles,
  errorStyles: errorStyles,
  placeholderStyles: placeholderStyles
};
var baseInputCss = function baseInputCss(theme) {
  return [{
    borderWidth: 1,
    borderStyle: "solid",
    borderColor: theme.colors.grey[30],
    borderRadius: theme.radii[2],
    background: theme.colors.white,
    color: theme.colors.grey[90],
    fontFamily: theme.fonts.system,
    fontSize: theme.fontSizes[2],
    height: "2.25rem",
    padding: "0 ".concat(theme.space[3]),
    position: "relative",
    width: "100%",
    zIndex: 1,
    WebkitAppearance: "none",
    ":focus": baseFormControlStyles.focusedStyles(theme),
    ":disabled": baseFormControlStyles.disabledStyles(theme),
    "&:disabled::placeholder": baseFormControlStyles.disabledPlaceholderStyles(theme),
    "&::placeholder": baseFormControlStyles.placeholderStyles(theme),
    "&[aria-invalid='true']": baseFormControlStyles.errorStyles(theme),
    "&[aria-invalid='true']:focus": baseFormControlStyles.focusedErrorStyles(theme)
  }];
};
function getOptionLabelCss() {
  var optionControlSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "0px";
  var optionsDirection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "column";
  return function (theme) {
    return {
      color: theme.colors.grey[90],
      cursor: "pointer",
      lineHeight: theme.lineHeights.dense,
      fontSize: theme.fontSizes[2],
      paddingLeft: "calc(".concat(optionControlSize, " + ").concat(optionsDirection === "row" ? theme.space[2] : theme.space[4], ")")
    };
  };
}
function getOptionLabelOffsetStyles() {
  var optionsDirection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "column";
  return function (theme) {
    return {
      paddingLeft: optionsDirection === "row" ? theme.space[2] : theme.space[4]
    };
  };
}
function getFieldLayoutStyles() {
  var layout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "vertical";
  var isGroupField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var isHorizontal = layout === "horizontal";

  var labelCss = function labelCss(theme) {
    return [isHorizontal && _defineProperty({}, theme.mediaQueries.desktop, [{
      display: "table-cell",
      minWidth: "20ch",
      maxWidth: "20ch",
      // Use box-sizing in combination with width and padding-right
      // to ensure that the label text itself takes no more than 20 chars in width
      boxSizing: "content-box",
      width: "20ch",
      paddingRight: theme.space[7],
      paddingTop: theme.space[3],
      verticalAlign: "top"
    }, isGroupField && {
      // Unfortunately, setting "display" to <legend> does not seem to work in Chrome,
      // So instead we are going to rely on "float" for group form fields
      "float": "left"
    }])];
  };

  var fieldBodyCss = function fieldBodyCss(theme) {
    return [isHorizontal && _defineProperty({}, theme.mediaQueries.desktop, {
      display: "table-cell",
      width: "100%",
      verticalAlign: "top"
    })];
  };

  return {
    labelCss: labelCss,
    fieldBodyCss: fieldBodyCss
  };
}

export { baseFormControlStyles, baseInputCss, getFieldLayoutStyles, getOptionLabelCss, getOptionLabelOffsetStyles };
//# sourceMappingURL=index.esm.js.map
