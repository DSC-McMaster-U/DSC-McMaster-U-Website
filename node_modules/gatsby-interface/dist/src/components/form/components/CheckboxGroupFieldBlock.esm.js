import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from '@emotion/core';
import { OptionsContainer } from './styled-primitives/StyledFormElements.esm.js';
import { getOptionLabelOffsetStyles } from '../styles/index.esm.js';
import { FormGroupFieldBlock } from './FormFieldBlock.esm.js';
import { StyledCheckbox, StyledCheckboxLabel } from './styled-primitives/StyledCheckbox.esm.js';

var CheckboxGroupFieldBlock = function CheckboxGroupFieldBlock(props) {
  var id = props.id,
      label = props.label,
      layout = props.layout,
      optionsDirection = props.optionsDirection,
      labelSize = props.labelSize,
      options = props.options,
      error = props.error,
      hint = props.hint,
      className = props.className,
      validationMode = props.validationMode,
      fieldValue = props.value,
      required = props.required,
      rest = _objectWithoutProperties(props, ["id", "label", "layout", "optionsDirection", "labelSize", "options", "error", "hint", "className", "validationMode", "value", "required"]);

  return jsx(FormGroupFieldBlock, {
    id: id,
    label: label,
    error: error,
    hint: hint,
    required: required,
    labelSize: labelSize,
    validationMode: validationMode,
    layout: layout,
    className: className
  }, function (_ref) {
    var getOptionControlProps = _ref.getOptionControlProps,
        getOptionLabelProps = _ref.getOptionLabelProps;
    return jsx(OptionsContainer, {
      optionsDirection: optionsDirection
    }, options.map(function (_ref2) {
      var value = _ref2.value,
          label = _ref2.label,
          restOption = _objectWithoutProperties(_ref2, ["value", "label"]);

      return jsx("div", {
        key: value,
        css: function css(theme) {
          return [{
            display: "flex",
            flexShrink: 0,
            marginBottom: theme.space[4]
          }, optionsDirection === "row" ? {
            marginRight: theme.space[6]
          } : {
            "&:last-of-type": {
              marginBottom: 0
            }
          }];
        }
      }, jsx(StyledCheckbox, _extends({
        value: value // Support uncontrolled field
        ,
        checked: fieldValue === undefined ? undefined : fieldValue.includes(value)
      }, getOptionControlProps(value), rest, restOption)), jsx(StyledCheckboxLabel, _extends({}, getOptionLabelProps(value), {
        css: getOptionLabelOffsetStyles(optionsDirection)
      }), label));
    }));
  });
};
CheckboxGroupFieldBlock.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CheckboxGroupFieldBlock"
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/form/components/CheckboxGroupFieldBlock.tsx"] = {
    name: "CheckboxGroupFieldBlock",
    docgenInfo: CheckboxGroupFieldBlock.__docgenInfo,
    path: "src/components/form/components/CheckboxGroupFieldBlock.tsx"
  };
}

export { CheckboxGroupFieldBlock };
//# sourceMappingURL=CheckboxGroupFieldBlock.esm.js.map
