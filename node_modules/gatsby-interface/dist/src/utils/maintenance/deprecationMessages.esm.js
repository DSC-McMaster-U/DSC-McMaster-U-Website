import { warn } from './warn.esm.js';

function showCustomCssDeprecationMessage(customCss) {
  if (customCss === undefined) {
    return;
  }

  warn("Styling components via \"customCss\" prop is deprecated, please use Emotion \"css\" prop or pass a \"className\"");
}
function showFormSkeletonDeprecatedMessage(componentName) {
  var isGroupSkeleton = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  warn("<".concat(componentName, "> and its subcomponents should be considered deprecated and replaced with \"").concat(isGroupSkeleton ? "useAriaFormGroupField" : "useAriaFormField", "\""));
}
function showFormFieldDeprecatedMessage(componentName) {
  var isGroupField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  warn("\n<".concat(componentName, "> and its subcomponents should be considered deprecated and replaced with one of the following:\n  - <").concat(componentName, "Block> (or <").concat(componentName.substring(0, componentName.indexOf("Field")), "ConnectedField> in Formik forms)\n  - \"").concat(isGroupField ? "useAriaFormGroupField" : "useAriaFormField", "\" hook and a combination of styled form elements, such as <StyledInput>, <").concat(isGroupField ? "FormLegend" : "StyledLabel", ">, <FormError>\n").trim());
}

export { showCustomCssDeprecationMessage, showFormFieldDeprecatedMessage, showFormSkeletonDeprecatedMessage };
//# sourceMappingURL=deprecationMessages.esm.js.map
