import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';
import jsx from '@babel/plugin-transform-react-jsx';
import pragmatic from '@emotion/babel-plugin-jsx-pragmatic';
import emotion from 'babel-plugin-emotion';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var pragmaName = '___EmotionJSX'; // pull out the emotion options and pass everything else to the jsx transformer
// this means if @babel/plugin-transform-react-jsx adds more options, it'll just work
// and if babel-plugin-emotion adds more options we can add them since this lives in
// the same repo as babel-plugin-emotion

var index = (function (api, _ref) {
  if (_ref === void 0) {
    _ref = {};
  }

  var _ref2 = _ref,
      pragma = _ref2.pragma,
      sourceMap = _ref2.sourceMap,
      autoLabel = _ref2.autoLabel,
      labelFormat = _ref2.labelFormat,
      instances = _ref2.instances,
      options = _objectWithoutPropertiesLoose(_ref2, ["pragma", "sourceMap", "autoLabel", "labelFormat", "instances"]);

  return {
    plugins: [[pragmatic, {
      "export": 'jsx',
      module: '@emotion/core',
      "import": pragmaName
    }], [jsx, _objectSpread({
      pragma: pragmaName,
      pragmaFrag: 'React.Fragment'
    }, options)], [emotion, {
      sourceMap: sourceMap,
      autoLabel: autoLabel,
      labelFormat: labelFormat,
      instances: instances,
      cssPropOptimization: true
    }]]
  };
});

export default index;
