"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _objectWithoutPropertiesLoose = _interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose")), jsx = _interopDefault(require("@babel/plugin-transform-react-jsx")), pragmatic = _interopDefault(require("@emotion/babel-plugin-jsx-pragmatic")), emotion = _interopDefault(require("babel-plugin-emotion"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(source, !0).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(source).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}

var pragmaName = "___EmotionJSX", index = function(api, _ref) {
  void 0 === _ref && (_ref = {});
  var _ref2 = _ref, sourceMap = (_ref2.pragma, _ref2.sourceMap), autoLabel = _ref2.autoLabel, labelFormat = _ref2.labelFormat, instances = _ref2.instances, options = _objectWithoutPropertiesLoose(_ref2, [ "pragma", "sourceMap", "autoLabel", "labelFormat", "instances" ]);
  return {
    plugins: [ [ pragmatic, {
      export: "jsx",
      module: "@emotion/core",
      import: pragmaName
    } ], [ jsx, _objectSpread({
      pragma: pragmaName,
      pragmaFrag: "React.Fragment"
    }, options) ], [ emotion, {
      sourceMap: sourceMap,
      autoLabel: autoLabel,
      labelFormat: labelFormat,
      instances: instances,
      cssPropOptimization: !0
    } ] ]
  };
};

exports.default = index;
